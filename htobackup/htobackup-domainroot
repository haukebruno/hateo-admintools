#!/bin/bash

#Define variables, some has default values

AGE=""
DATE=$(date +%Y%m%d)
DESTDIR="/var/backups"
DOCROOT="/var/www"
DOMAIN=""
ENCRYPTKEY=""
LOCALDIR="/tmp"
PASSWORD=""
REMOTE=""
REMOVE="false"
USER=""
TRANSFER=""

REQUIRED_ARGS=('TRANSFER')

#Usage

function help() {

  echo -e "\r\nhtobackup-domainroot: Backup your DocumentRoots fully encrypted to different locations via different protocols"
  echo -e "Options marked with '*' are required!"

  echo -e "\r\nUsage:
  -t, --transfer [ftp, local]\t\t\t * Transfer type

  -a, --age DAYS\t\t\t\t Delete logs older than DAYS 
  -d, --docroot DIR\t\t\t\t Global directory for DocumentRoots (/var/www)
  -D, --domain DOMAINNAME\t\t\t Specific domain, default is all
  -k, --encryption-passphrase YOURPASSPHRASE\t Set passphrase for encrypted files
  -l, --localdir DIR\t\t\t\t Local backup directory (/tmp)
  -L, --destdir DIR\t\t\t\t Directory on destination (/var/backups)
  -p, --password REMOTEPASSWORD\t\t\t Password for remote user
  -r, --remote REMOTEHOST\t\t\t IP or name from remote host
  -R, --remove\t\t\t\t Remove backups from local directory
  -u, --user REMOTEUSER\t\t\t\t Remote username
  -h, --help\t\t\t\t\t Print this help
  "
  exit 0

}

#Error handling

function missing_arg() {

  echo -e "$0: ERROR: Missing argument for $1\r\n"
  exit 1

}

function check_required_args() {

  for e in "${REQUIRED_ARGS[@]}"
  do
    
    tmp=${e}
    if [[ -z ${!tmp} ]]
    then
  
      echo -e "$0: ERROR: Missing value for \$$e\r\n"
      exit 1

    fi

  done

  if [[ $TRANSFER == 'ftp' ]] && [[ -z $USER || -z $PASSWORD || -z $REMOTE ]]
  then

    echo -e "$0: ERROR: Transfer via 'ftp' not possible without username, password and host\r\n"
    exit 1

  fi

  if [[ "$TRANSFER" != "ftp" && "$TRANSFER" != "local" ]]
  then

    echo -e "$0: ERROR: Transfer $TRANSFER is invalid\r\n"
    exit 1

  fi

}

#Main function

function backup_domainroot() {

  DELETEDATE=$(date --date="${AGE} days ago" +%Y%m%d)

  if [ -z $ENCRYPTKEY ]
    then

      ENCRYPTKEY=$(pwgen -s 12 1)

  fi

  if [[ $DOMAIN ]]
  then

    FILENAME=$DOMAIN-$DATE.des3
    OLDFILENAME=$DOMAIN-$DELETEDATE.des3

    tar -cjf - -p --atime-preserve -C $DOCROOT $DOCROOT/$DOMAIN |openssl des3 -salt -k $ENCRYPTKEY |dd of=$LOCALDIR/$FILENAME

    copy_backup

    exit 0

  else

    for dir in $(ls $DOCROOT/$DOMAIN)
    do

      DOMAIN=$dir
      FILENAME=$dir-$DATE.des3
      OLDFILENAME=$dir-$DELETEDATE.des3

      tar -cjf - -p --atime-preserve -C $DOCROOT $dir |openssl des3 -salt -k $ENCRYPTKEY |dd of=$LOCALDIR/$FILENAME

      copy_backup

    done

    exit 0

  fi

}

#Copy function

function copy_backup() {

if [ $TRANSFER == "ftp" ]
then

  ftp -inv $REMOTE << EOF
  user $USER $PASSWORD
  put $LOCALDIR/$FILENAME $DESTDIR/$FILENAME
  bye
EOF

  if [ -n $AGE ]
  then

    ftp -inv $REMOTE << EOF
    user $USER $PASSWORD
    dir $DESTDIR $LOCALDIR/tmplist
EOF

    for i in $(awk '{print $9}' $LOCALDIR/tmplist)
    do

      if [[ "$i" == $DOMAIN* && "$i" < "$OLDFILENAME" ]]
      then

        ftp -inv $REMOTE << EOF
        user $USER $PASSWORD
        mdelete $DESTDIR/$i
EOF

      fi

    done

  fi


elif [ $TRANSFER == "local" ]
then

  cp $LOCALDIR/$FILENAME $DESTDIR

  if [  -n "$AGE" ]
  then

    find $DESTDIR -type f -mtime +$AGE -delete

  fi

fi  

if [ $REMOVE = "true" ]
then
  
  rm $LOCALDIR/$FILENAME

fi

echo -e $FILENAME "\t" $ENCRYPTKEY > /root/backups/domains/$FILENAME.passwd
chmod 400 /root/backups/domains/$FILENAME.passwd

}

#Command line options

if [[ "$#" -eq 0 ]] || [[ "$#" -eq 1 && "$1" == "-h" || "$1" == "--help" ]] 
then

  help

fi

while [ "$#" -gt 0 ]
do

  case $1 in

    -d|--docroot)
      if [[ "$#" -ge 2 && "$2" != -* ]]
      then
      
        DOCROOT=$2
        shift 2

      else

	missing_arg $1

      fi
      ;;

    -D|--domain)
      if [[ "$#" -ge 2 && "$2" != -* ]]
      then

        DOMAIN=$2
        shift 2

      else

        missing_arg $1

      fi
      ;;

    -t|--transfer)
      if [[ "$#" -ge 2 && "$2" != -* ]]
      then
        
        TRANSFER=$2
        shift 2

      else

        missing_arg $1

      fi
      ;;

    -l|--localdir)
      if [[ "$#" -ge 2 && "$2" != -* ]]
        then

          LOCALDIR=$2
          shift 2;
        
        else

         missing_arg $1

        fi
        ;;

    -L|--destdir)
      if [[ "$#" -ge 2 && "$2" != -* ]]
         then
 
           DESTDIR=$2
           shift 2;
 
         else
 
          missing_arg $1
 
         fi
         ;;

    -u|--user)
      if [[ "$#" -ge 2 && "$2" != -* ]]
      then
      
        if [[ -z $2 ]]
        then

          echo "kein user gesetzt"
          exit 1
        else

          USER=$2
          shift 2
      
        fi

      else

        missing_arg $1

      fi
      ;;

    -p|--password)
      if [[ "$#" -ge 2 && "$2" != -* ]]
      then

        PASSWORD=$2
        shift 2

      else

        missing_arg $1

      fi
      ;;

    -r|--remote)
      if [[ "$#" -ge 2 && "$2" != -* ]]
      then

        REMOTE=$2
        shift 2

      else

        missing_arg $1

      fi
      ;;

    -R|--remove)
      REMOVE="true"
      shift 1
      ;;

    -k|--encryption-passphrase)
      if [[ "$#" -ge 2 && "$2" != -* ]]
      then

        ENCRYPTKEY=$2
        shift 2

      else

        missing_arg $1

      fi
      ;;

    -a|--age)
      if [[ "$#" -ge 2 && "$2" != -* ]]
       then
 
         AGE=$2
         shift 2
 
       else
 
         missing_arg $1
 
       fi
       ;;

  esac

done

check_required_args

backup_domainroot
