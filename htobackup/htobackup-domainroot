#!/bin/bash

#Define variables, some has default values

DOCROOT="/var/www"
USER=""
PASSWORD=""
DOMAIN=""
TRANSPORT="ftp"
REMOTE=""
ENCRYPTKEY=""
DATE=$(date +%Y%m%d)
DELETEDATE=$(date --date="7 days ago" +%Y%m%d)
REMOVE="false"
BACKUPTMPDIR=/var/backups/hateo/domains

#Usage

function help() {

  echo -e "\r\nUsage:
  -d, --docroot DIR\t\t\t\t Global directory for DocumentRoots (/var/www)
  -D, --domain DOMAINNAME\t\t\t Specific domain, default is all
  -k, --encryption-passphrase YOURPASSPHRASE\t Set passphrase for encrypted files
  -p, --password REMOTEPASSWORD\t\t\t Password for remote user
  -r, --remote REMOTEHOST\t\t\t IP or name from remote host
  -R, --remove\t\t\t\t\t Remove backups from local directory
  -t, --transfer [ftp, local]\t\t\t\t Transfer type (ftp)
  -u, --user REMOTEUSER\t\t\t\t Remote username
  -h, --help\t\t\t\t\t Print this help
  "
  exit 0

}

#Error handling

function missing_arg() {

  echo -e "$0: ERROR: Missing argument for $1\r\n"
  exit 1

}

#Main function

function backup_domainroot() {

  for dir in $(ls $DOCROOT/$DOMAIN)
  do

    FILENAME=$dir-$DATE.des3
    OLDFILENAME=$dir-$DELETEDATE.des3

    if [ -z $ENCRYPTKEY ]
    then

      ENCRYPTKEY=$(pwgen -s 12 1)

    fi

    tar -cjf - -p --atime-preserve -C $DOCROOT $dir |openssl des3 -salt -k $ENCRYPTKEY |dd of=$BACKUPTMPDIR/$FILENAME

    if [ $TRANSPORT == "ftp" ]
    then

      ftp -inv $REMOTE << EOF
      user $USER $PASSWORD
      delete domains/$OLDFILENAME
      put $BACKUPTMPDIR/$FILENAME domains/$FILENAME
      bye
EOF
    elif [ $TRANSPORT == "local" ]
    then
      cp $BACKUPTMPDIR/$FILENAME /mnt/backup/users/haukebruno/domains/
    fi

    echo -e $FILENAME "\t" $ENCRYPTKEY > /root/backups/domains/$FILENAME.passwd
    chmod 400 /root/backups/domains/$FILENAME.passwd

    if [ $REMOVE = "true" ]
    then
    
      rm $BACKUPTMPDIR/$FILENAME

    fi
    

  done

}

#Command line options

if [[ "$#" -eq 0 ]] || [[ "$#" -eq 1 && "$1" == "-h" || "$1" == "--help" ]] 
then

  help

fi

while [ "$#" -gt 0 ]
do

  case $1 in

    -d|--docroot)
      if [[ "$#" -ge 2 && "$2" != -* ]]
      then
      
        DOCROOT=$2
        shift 2

      else

	missing_arg $1

      fi
      ;;

    -D|--domain)
      if [[ "$#" -ge 2 && "$2" != -* ]]
      then

        DOMAIN=$2
        shift 2

      else

        missing_arg $1

      fi
      ;;

    -t|--transfer)
      if [[ "$#" -ge 2 && "$2" != -* ]]
      then
        
        TRANSPORT=$2
        shift 2

      else

        missing_arg $1

      fi
      ;;

    -u|--user)
      if [[ "$#" -ge 2 && "$2" != -* ]]
      then
      
        USER=$2
        shift 2

      else

        missing_arg $1

      fi
      ;;

    -p|--password)
      if [[ "$#" -ge 2 && "$2" != -* ]]
      then

        PASSWORD=$2
        shift 2

      else

        missing_arg $1

      fi
      ;;

    -r|--remote)
      if [[ "$#" -ge 2 && "$2" != -* ]]
      then

        REMOTE=$2
        shift 2

      else

        missing_arg $1

      fi
      ;;

    -R|--remove)
      REMOVE="true"
      shift 1
      ;;

    -k|--encryption-passphrase)
      if [[ "$#" -ge 2 && "$2" != -* ]]
      then

        ENCRYPTKEY=$2
        shift 2

      else

        missing_arg $1

      fi
      ;;

  esac

done


backup_domainroot
